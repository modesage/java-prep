DSA must know patterns

1. prefix sum - query sum of elements in a subarray
https://leetcode.com/problems/range-sum-query-immutable/description/
https://leetcode.com/problems/contiguous-array/
https://leetcode.com/problems/subarray-sum-equals-k/

2. two pointers - initialise two variables and move them close or away from each other based on the situation
https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/
https://leetcode.com/problems/3sum/
https://leetcode.com/problems/container-with-most-water/

3. sliding window - helps find subarray and substrings
https://leetcode.com/problems/maximum-average-subarray-i/
https://leetcode.com/problems/longest-substring-without-repeating-characters/
https://leetcode.com/problems/minimum-window-substring/

4. fast and slow pointers - this pattern help solve problems related to linked list, arrays which involves finding cycles
                            it works by moving two pointers in different speeds.
                          - this patterns can also be used to find the middle node of linked list in one pass,
                            as the fast pointer will reach the end the slow one will reach the middle.
https://leetcode.com/problems/linked-list-cycle/
https://leetcode.com/problems/happy-number/
https://leetcode.com/problems/find-the-duplicate-number/

5. linked list in-place reversal
https://leetcode.com/problems/reverse-linked-list/
https://leetcode.com/problems/reverse-linked-list-ii/
https://leetcode.com/problems/swap-nodes-in-pairs/

6. monotonic stack - uses stack to find the next greater or next smallest element in the array
https://leetcode.com/problems/next-greater-element-i/
https://leetcode.com/problems/daily-temperatures/
https://leetcode.com/problems/largest-rectangle-in-histogram/

7. top k elements - helps to find k largest, k smallest or k most frequent elements
                   - for k largest use min-heap and for k smallest use max-heap
https://leetcode.com/problems/kth-largest-element-in-an-array/
https://leetcode.com/problems/top-k-frequent-elements/
https://leetcode.com/problems/find-k-pairs-with-smallest-sums/

8. overlapping intervals - useful for problems involving intervals, ranges that may overlap
                           problem types to apply:
                         - merging intervals - given a collection of intervals merge all overlapping intervals into one
                         - interval intersection - find the intersection between two set of intervals
                         - insert intervals - add a new interval to a list of non-overlapping intervals
                         - finding the min no of meeting rooms needed for overlapping meeting time.
https://leetcode.com/problems/merge-intervals/
https://leetcode.com/problems/insert-interval/
https://leetcode.com/problems/non-overlapping-intervals/

9. modified binary search - searching in a nearly sorted array
                          - searching in a rotated sorted array
                          - searching in a list with unknown length
                          - search in an array with duplicates
                          - finding the first or last occurrence of an element
                          - finding the sq root of a no
                          - finding a peak element
https://leetcode.com/problems/search-in-rotated-sorted-array/
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
https://leetcode.com/problems/search-a-2d-matrix-ii/

10. binary tree traversal - popular ones when to use
                          - preorder - to create a copy of tree(serialization)
                          https://leetcode.com/problems/binary-tree-paths/
                          - inorder - need to retrieve the values of BST in sorted order
                          https://leetcode.com/problems/kth-smallest-element-in-a-bst/
                          - postorder - need to process child nodes before the parent
                          https://leetcode.com/problems/binary-tree-maximum-path-sum/
                          - levelorder - need to explore all nodes at the current level before next
                          https://leetcode.com/problems/binary-tree-level-order-traversal-ii/
11. depth first search - used to explore all paths or branches in graphs or trees
                       - finding a path between 2 nodes
                       - checking if a graph contains a cycle
                       - finding a topological order in a directed acyclic graph(DAG)
                       - counting number of connected components in a graph
https://leetcode.com/problems/clone-graph/
https://leetcode.com/problems/path-sum-ii/
https://leetcode.com/problems/course-schedule-ii/

12. breadth first search - traversal technique that explore nodes level by level in a tree or a graph
                         - finding the shortest path between two nodes (in a unweighted graph)
                         - printing all nodes of a tree level by level
                         - finding all connected components in a graph
                         - finding the shortest transformation sequence from one word to other
https://leetcode.com/problems/binary-tree-level-order-traversal/
https://leetcode.com/problems/rotting-oranges/
https://leetcode.com/problems/word-ladder/

13. matrix traversal - most matrix traversal problems can be seen as a graph problems
                     - finding the shortest path in the grid
https://leetcode.com/problems/flood-fill/
https://leetcode.com/problems/number-of-islands/
https://leetcode.com/problems/surrounded-regions/

14. backtracking - used when it involves exploring all potential solution paths and backtracking the paths that dont lead to a valid solution.
                 - generate all possible PnC of a given set of elements
                 - solve puzzles like sudoku, n-queens problems
                 - find all possible paths from start to end in a graph or a maze
                 - generate all valid parentheses of a given length
https://leetcode.com/problems/permutations/
https://leetcode.com/problems/subsets/
https://leetcode.com/problems/n-queens/

15. dynamic programming - solving optimization problems by breaking them down into smaller sub-problems and storing their solutions to avoid repetitive work
                        - overlapping sub-problems
                        - optimal sub-structure properties problems like where u need to max or min a certain value
                        - counting problems like count the no of ways u can achieve a goal

                        common dp pattern
                        - fibonacci no
                        - 0/1 knapsack
                        - longest common subsequence
                        - longest increasing subsequence
                        - subset sum
                        - matrix chain multiplication
https://leetcode.com/problems/climbing-stairs/
https://leetcode.com/problems/coin-change/
https://leetcode.com/problems/longest-common-subsequence/
https://leetcode.com/problems/longest-increasing-subsequence/
https://leetcode.com/problems/partition-equal-subset-sum/
https://leetcode.com/problems/burst-balloons/